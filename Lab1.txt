Lab 1
Number Representation
1. Convert 1590 to binary.
11000110110
2. Convert 0b101110110 to decimal.
374
3. Convert 0b1100 0000 0001 1010 0001 0101 1011 1010 1101 to hexadecimal.
C01A15BAD
4. Convert 0b100 001 101 101 to octal.
4155
5. Convert 0o31337 to binary.
111101001101001
6. Convert 0xBADF00D to binary and then to octal.
5655740064
7. Convert 0o6157 to binary and then to decimal.
3183
8. Convert 497 to binary. Then, use two’s complement to convert 497 to -497 in binary.
497 to binary: 111110001
-497 to binary: 1000001111
9. Convert 900.79 to binary up to the 1/16ths spot.
1110000100.1100
10. Count from 0 through 10 in ternary (base 3).
Note: the algorithm for counting is similar regardless of the number base.
Show the place values.
   3^0
0: 0
   3^0
1: 1
   3^0
2: 2
   3^1 3^0
3:  1   0
   3^1 3^0
4:  1   1
   3^1 3^0
5:  1   2
   3^1 3^0
6:  2   0
   3^1 3^0
7:  2   1
   3^1 3^0
8:  2   2
   3^2 3^1 3^0
9:  1   0   0
   3^2 3^1 3^0
10: 1   0   1
Circuit Design
1. Let A and B be two 2-bit binary numbers (i.e., A1 A0 and B1 B0).
Write out a truth table for A less than or equal to B. For example,
0b10 is less than or equal to 0b11, so the output for that row should be true.
   A1  A0  B1  B0   (A <= B)
   0   0   0   0       1
   0   0   0   1       1
   0   0   1   0       1
   0   0   1   1       1
   0   1   0   0       0
   0   1   0   1       1
   0   1   1   0       1
   0   1   1   1       1
   1   0   0   0       0
   1   0   0   1       0
   1   0   1   0       1
   1   0   1   1       1
   1   1   0   0       0
   1   1   0   1       0
   1   1   1   0       0
   1   1   1   1       1
2. (A1 + A0' + B1 + B0) * (A1' + A0 + B1 + B0) * (A1' + A0 + B1 + B0')
* (A1' + A0' + B1 + B0) * (A1' + A0' + B1 + B0') * (A1' + A0' + B1' + B0)
3. Write out the truth table for the minority circuit
(it’s true when the minority of X, Y, and Z are true).
   X  Y  Z   | Minority is true
   0  0  0             1
   0  0  1             1
   0  1  0             1
   0  1  1             0
   1  0  0             1
   1  0  1             0
   1  1  0             0
   1  1  1             0
4. (X' * Y' * Z') + (X' * Y' * Z) + (X' * Y * Z') + (X * Y' * Z')
Boolean Algebra
1. Show c + (b * c)' = 1
c + (b * c)'
c + (b' + c')
(c + c') + b
1 + b
1
2. Show (a + c) * (a * d + a * d') + a * c + c = a + c
(a + c) * (a * d + a * d') + (a * c) + c
(a + c) * (a * (d + d')) + (a * c) + c
(a + c) * (a * 1) + (a * c) + c
((a + c) * a) + (a * c) + c
a + (a * c) + c
a + c
3. Simplify a' * (a + b) + (b + a * a) * (a + b')
a' * (a + b) + (b + a * a) * (a + b')
(a' * a) + (a * b) + (b + a * a) * (a + b')
0 + (a * b) + ((b + a * a) * (a + b'))
0 + (a * b) + ((b + a) * (a + b'))
0 + (a * b) + (a + (b * b'))
0 + (a * b) + (a + 0)
0 + (a * b) + a
(a * b) + a
a
4. Show (a' * b') + (a' * b) + (a * b') = (a * b)'
(a' * b') + (a' * b) + (a * b')
(a' * (b' + b)) + (a * b')
(a' * 1) + (a * b')
a' + (a * b')
(a' + a) * (a' * b')
1 * (a' * b')
a' * b'
(a + b)'
Dual Form
Find the dual form.
1. (a + b)' + c * a' + 1
((a * b)' * c) + (a' * 0)
2. 1 + 1 * 0'
(0 * 0) + 1'
